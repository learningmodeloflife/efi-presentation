{"version":3,"file":"timer.js","sources":["../../js/custom_js/timer.js"],"sourcesContent":["class AnimatedSequence {\n    constructor(rootElement) {\n        this.root = rootElement;\n        this.pressedKey = null;\n        this.minutes = 8760000;\n        this.isAnimating = false;\n        this.CHARS_PER_MINUTE = 300;\n        this.INTERVAL_MS = (60 * 1000) / this.CHARS_PER_MINUTE;\n        this.letterInterval = null;\n        this.timerInterval = null;\n        this.nucleotides = ['A', 'C', 'T', 'G'];\n        \n        this.completionDate = this.calculateCompletionDate();\n        this.createDOMStructure();\n        \n        setTimeout(() => {\n            const dateSpan = this.root.querySelector('.completion-date .date');\n            if (dateSpan) {\n                dateSpan.style.opacity = '1';\n            }\n        }, 5000);\n        \n        this.startAnimation();\n    }\n  \n    calculateCompletionDate() {\n        const date = new Date();\n        date.setDate(date.getDate() + 7407);\n        return date.toLocaleDateString('en-UK', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    }\n\n    createDOMStructure() {\n        const keyboardLayout = {\n            functionRow: ['esc', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'logo'],\n            numberRow: ['§', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'delete'],\n            topRow: ['tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\\\'],\n            homeRow: ['caps', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', '\\'', 'return'],\n            bottomRow: ['shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/', 'shift'],\n            modifierRow: ['fn', 'control', 'option', 'command', 'space', 'command', 'option', 'control']\n        };\n\n        const keySize = 45;\n        const keySpacing = 48;\n        const rowSpacing = 48;\n        \n        this.root.innerHTML = `\n            <div class=\"timer-wrapper\">\n                <div class=\"completion-date\">\n                    <span class=\"label\">Complete on: </span>\n                    <span class=\"date\" style=\"opacity: 0\">${this.completionDate}</span>\n                </div>\n                <div class=\"timer\" id=\"timer\"></div>\n            </div>\n            \n            <div class=\"typed-text\" id=\"typed-text\"></div>\n            \n            <div class=\"keyboard\">\n                <svg viewBox=\"0 0 850 340\" style=\"width: 850px;\">\n                    ${this.generateKeyboardRows(keyboardLayout, keySize, keySpacing, rowSpacing)}\n                </svg>\n            </div>\n        `;\n\n        this.timerElement = this.root.querySelector('#timer');\n    }\n\n    generateKeyboardRows(layout, keySize, keySpacing, rowSpacing) {\n        let yOffset = 20;\n        let html = '';\n        \n        const keySizes = {\n            'delete': 1.5,\n            'tab': 1.5,\n            'caps': 1.5,\n            'shift': 2.25,\n            'return': 2,\n            'command': 1.25,\n            'option': 1.25,\n            'control': 1.25,\n            'fn': 1.25,\n            'space': 4.5,\n            'logo': 1.5,\n            '\\\\': 1.5\n        };\n\n        // Calculate total width for the widest row\n        const getTotalRowWidth = (keys) => {\n            return keys.reduce((total, key) => {\n                const width = (keySizes[key] || 1) * keySize;\n                return total + width + 3;\n            }, 0);\n        };\n\n        const maxWidth = Math.max(...Object.values(layout).map(getTotalRowWidth));\n        const startX = (850 - maxWidth) / 2;\n\n        Object.entries(layout).forEach(([rowName, keys]) => {\n            // Calculate the actual width of this row\n            const rowWidth = getTotalRowWidth(keys);\n            \n            // Center align each row\n            let xOffset = startX + (maxWidth - rowWidth) / 2;\n            \n            keys.forEach(key => {\n                const width = (keySizes[key] || 1) * keySize;\n                const isSpecialKey = key.length > 1;\n                const isFunctionKey = rowName === 'functionRow';\n                \n                const displayKey = key\n                    .replace('space', '')\n                    .replace('command', '⌘')\n                    .replace('option', '⌥')\n                    .replace('shift', '⇧')\n                    .replace('control', '⌃')\n                    .replace('delete', '⌫')\n                    .replace('return', '↵')\n                    .replace('caps', '⇪')\n                    .replace('logo', `<image href=\"assets/LML_logo.png\" x=\"${width/2 - 10}\" y=\"${keySize/2 - 10}\" width=\"20\" height=\"20\"/>`);\n                \n                html += `\n                    <g transform=\"translate(${xOffset}, ${yOffset})\" class=\"key-group\">\n                        <rect x=\"2\" y=\"2\" \n                              width=\"${width-4}\" height=\"${keySize-4}\"\n                              rx=\"4\" ry=\"4\"\n                              fill=\"#ffffff\"\n                              stroke=\"#d0d0d0\"\n                              stroke-width=\"1.5\"\n                              class=\"key-${key.replace(/[^a-zA-Z0-9]/g, '_')}\"/>\n                        \n                        ${key === 'logo' ? displayKey : `\n                            <text x=\"${width/2}\" y=\"${keySize/2}\" \n                                  font-family=\"SF Pro, -apple-system, Arial, sans-serif\" \n                                  font-size=\"${isSpecialKey ? '11' : isFunctionKey ? '10' : '13'}\" \n                                  font-weight=\"${isSpecialKey ? '500' : '400'}\"\n                                  text-anchor=\"middle\" \n                                  dominant-baseline=\"middle\"\n                                  fill=\"#505050\"\n                            >${displayKey}</text>\n                        `}\n                    </g>\n                `;\n                \n                xOffset += width + 3;\n            });\n            \n            yOffset += rowSpacing;\n        });\n        \n        return html;\n    }\n\n    updateTimer() {\n        if (!this.isAnimating) return;\n\n        let charCount = this.getCharacterCount();\n        const countStr = charCount.toString();\n        \n        // Create the HTML structure with empty boxes on the left\n        const totalBoxes = 10;  // Total number of boxes to show\n        const emptyBoxes = totalBoxes - countStr.length;\n        \n        this.timerElement.innerHTML = \n            // Empty boxes\n            Array(emptyBoxes).fill(0).map(() => \n                `<div class=\"digit-box\">&nbsp;</div>`\n            ).join('') +\n            // Actual count boxes\n            countStr.split('').map(digit => \n                `<div class=\"digit-box\">${digit}</div>`\n            ).join('');\n    }\n\n    getCharacterCount() {\n        this._characterCount = (this._characterCount || 0) + 1;\n        return this._characterCount;\n    }\n\n    createLetter(letter) {\n        const keyClass = `key-${letter.replace(/[^a-zA-Z0-9]/g, '_')}`;\n        const keyElement = this.root.querySelector(`.${keyClass}`);\n        \n        if (keyElement) {\n            // Flash the key\n            const keyGroup = keyElement.closest('.key-group');\n            keyGroup.classList.add('pressed');\n            \n            setTimeout(() => {\n                keyGroup.classList.remove('pressed');\n            }, 80);\n\n            // Update the counter\n            this.updateTimer();\n\n            // Add letter to typed text with color\n            const typedText = this.root.querySelector('#typed-text');\n            const span = document.createElement('span');\n            span.textContent = letter;\n            \n            // Set initial state - fully visible immediately\n            span.style.position = 'relative';\n            span.style.display = 'inline-block';\n            span.style.opacity = '1';  // Start visible\n            \n            // Set color based on nucleotide\n            const colors = {\n                'A': '#44AF69',\n                'C': '#F8333C',\n                'T': '#FCAB10',\n                'G': '#2B9EB3'\n            };\n            span.style.color = colors[letter];\n            \n            // Add to DOM\n            typedText.prepend(span);\n\n            // Fade out and remove\n            setTimeout(() => {\n                span.style.transition = 'all 0.5s ease-out';\n                span.style.opacity = '0.5';\n                setTimeout(() => span.remove(), 500);\n            }, 3000);\n        }\n    }\n\n    startAnimation() {\n        this.isAnimating = true;\n        this._characterCount = 0;\n        this.updateTimer();\n        \n        this.letterInterval = setInterval(() => {\n            const randomNucleotide = this.nucleotides[Math.floor(Math.random() * this.nucleotides.length)];\n            this.createLetter(randomNucleotide);\n        }, this.INTERVAL_MS);\n    }\n\n    stopAnimation() {\n        this.isAnimating = false;\n        clearInterval(this.letterInterval);\n        clearInterval(this.timerInterval);\n    }\n\n    cleanup() {\n        this.stopAnimation();\n        this.root.innerHTML = '';\n    }\n}\n\n// Export for use in Reveal.js\nexport function initializeSequence(rootElement) {\n    return new AnimatedSequence(rootElement);\n}\n\nlet sequenceInstance = null;\n\nexport function initializeRevealHandlers() {\n    // Initialize when Reveal.js is ready\n    const setupSequence = (slide) => {\n        const root = slide.querySelector('#animated-sequence-root');\n        if (root) {\n            sequenceInstance = initializeSequence(root);\n        }\n    };\n\n    const cleanupSequence = () => {\n        if (sequenceInstance) {\n            sequenceInstance.cleanup();\n            sequenceInstance = null;\n        }\n    };\n\n    // Initial setup\n    const currentSlide = Reveal.getCurrentSlide();\n    if (currentSlide && currentSlide.classList.contains('sequence-slide')) {\n        setupSequence(currentSlide);\n    }\n\n    // Handle slide changes\n    Reveal.on('slidechanged', event => {\n        cleanupSequence();\n        if (event.currentSlide.classList.contains('sequence-slide')) {\n            setupSequence(event.currentSlide);\n        }\n    });\n}\n\n// Listen for reveal-ready event instead of auto-initializing\nwindow.addEventListener('reveal-ready', () => {\n    if (typeof Reveal !== 'undefined') {\n        initializeRevealHandlers();\n    } else {\n        console.error('Reveal.js not found. Timer initialization failed.');\n    }\n});"],"names":["AnimatedSequence","constructor","rootElement","this","root","pressedKey","minutes","isAnimating","CHARS_PER_MINUTE","INTERVAL_MS","letterInterval","timerInterval","nucleotides","completionDate","calculateCompletionDate","createDOMStructure","setTimeout","dateSpan","querySelector","style","opacity","startAnimation","date","Date","setDate","getDate","toLocaleDateString","weekday","year","month","day","innerHTML","generateKeyboardRows","functionRow","numberRow","topRow","homeRow","bottomRow","modifierRow","timerElement","layout","keySize","keySpacing","rowSpacing","yOffset","html","keySizes","delete","tab","caps","shift","return","command","option","control","fn","space","logo","getTotalRowWidth","keys","reduce","total","key","maxWidth","Math","max","Object","values","map","startX","entries","forEach","rowName","rowWidth","xOffset","width","isSpecialKey","length","isFunctionKey","displayKey","replace","updateTimer","countStr","getCharacterCount","toString","emptyBoxes","Array","fill","join","split","digit","_characterCount","createLetter","letter","keyClass","keyElement","keyGroup","closest","classList","add","remove","typedText","span","document","createElement","textContent","position","display","colors","A","C","T","G","color","prepend","transition","setInterval","randomNucleotide","floor","random","stopAnimation","clearInterval","cleanup","initializeSequence","sequenceInstance","initializeRevealHandlers","setupSequence","slide","currentSlide","Reveal","getCurrentSlide","contains","on","event","window","addEventListener","console","error"],"mappings":"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"}