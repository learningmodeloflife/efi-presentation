function t(){const t=document.getElementById("decoding-animation");if(!t||window.innerWidth<=768)return;const e=t.textContent.trim();function n(){const t=.4*Math.max(document.documentElement.clientWidth||0,window.innerWidth||0)/e.length,n=Math.min(Math.max(8,t),50);return{width:n,height:1.1*n}}t.textContent=null;let{height:i,width:a}=n();const o=["A","C","T","G"],d=["0","1"],s=[],l=1.5,c=1.5,r=.5;function h(){t.innerHTML="",s.length=0,window.innerWidth<=590?e.split(" ").forEach((e=>{const n=document.createElement("div");n.className="decoding-word",e.split("").forEach(((t,e)=>{const i=f(t,s.length);n.appendChild(i),s.push(i)})),t.appendChild(n)})):function(){const n=e.length*a,o=document.createElement("div");o.style.position="relative",o.style.display="inline-block",o.style.width=n+"px",o.style.height=i+"px";for(let t=0;t<e.length;t++){const n=f(e[t],t);n.style.position="absolute",n.style.left=t*a+"px",n.style.top="0",o.appendChild(n),s.push(n)}t.appendChild(o)}()}function f(t,e){const n=document.createElement("span");return n.classList.add("decoding-char","decoded-text"),n.style.width=`${a}px`,n.style.height=`${i}px`,n.style.fontSize=.9*i+"px",n.dataset.final_char=t,n.dataset.index=e,p(n,l),n}async function p(t,e){if(!t.classList.contains("decoding")){t.classList.add("decoding"),t.classList.replace("decoded-text","encoded-text"),t.textContent=u(o);const n={opacity:[1,0]},i={opacity:[0,1]},a=e+Math.random()*c,s=l+Math.random()*c;await t.animate(n,{duration:1e3*a,iterations:1,fill:"forwards"}).finished,t.textContent=u(d),await t.animate(i,{duration:1e3*s,iterations:1,fill:"forwards"}).finished,await t.animate(n,{duration:1e3*r,delay:1e3*s,iterations:1,fill:"forwards"}).finished,t.textContent=t.dataset.final_char,t.classList.replace("encoded-text","decoded-text"),await t.animate(i,{duration:1e3*r,iterations:1,fill:"forwards"}).finished,t.classList.remove("decoding")}}function u(t){return t[Math.floor(Math.random()*t.length)]}let m;h(),t.addEventListener("mousemove",(function(e){const n=t.getBoundingClientRect(),i=e.clientX-n.left,a=e.clientY-n.top;s.forEach((t=>{const e=t.getBoundingClientRect(),o=e.left+e.width/2-n.left,d=e.top+e.height/2-n.top,s=Math.sqrt(Math.pow(i-o,2)+Math.pow(a-d,2));s<=100&&1*(1-s/100)>Math.random()&&p(t,0)}))})),window.addEventListener("resize",(()=>{clearTimeout(m),m=setTimeout((()=>{({height:i,width:a}=n()),h()}),250)}))}window.addEventListener("reveal-ready",(()=>{t()}));export{t as initializeDecodingAnimation};
//# sourceMappingURL=decoding-animation.js.map
