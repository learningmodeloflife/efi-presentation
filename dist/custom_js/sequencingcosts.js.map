{"version":3,"file":"sequencingcosts.js","sources":["../../js/custom_js/sequencingcosts.js"],"sourcesContent":["// Initialize function\nfunction initializeSequencingCosts() {\n    function createGenomeGraph() {\n        // Clear any existing graph\n        d3.select(\"#graph\").selectAll(\"*\").remove();\n        \n        // Set up dimensions\n        const width = 800;\n        const height = 500;\n        const margin = {top: 40, right: 60, bottom: 60, left: 80};\n        const innerWidth = width - margin.left - margin.right;\n        const innerHeight = height - margin.top - margin.bottom;\n\n        // Create SVG container\n        const svg = d3.select(\"#graph\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // Create group for the graph\n        const g = svg.append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Data\n        const data = [\n            { year: 2001, cost: 100000000 },\n            { year: 2002, cost: 50000000 },\n            { year: 2003, cost: 25000000 },\n            { year: 2004, cost: 15000000 },\n            { year: 2005, cost: 10000000 },\n            { year: 2006, cost: 8000000 },\n            { year: 2007, cost: 5000000 },\n            { year: 2008, cost: 2000000 },\n            { year: 2009, cost: 100000 },\n            { year: 2010, cost: 50000 },\n            { year: 2011, cost: 10000 },\n            { year: 2012, cost: 5000 },\n            { year: 2013, cost: 4000 },\n            { year: 2014, cost: 3000 },\n            { year: 2015, cost: 2000 },\n            { year: 2016, cost: 1500 },\n            { year: 2017, cost: 1200 },\n            { year: 2018, cost: 1000 },\n            { year: 2019, cost: 800 },\n            { year: 2020, cost: 600 },\n            { year: 2021, cost: 500 },\n            { year: 2022, cost: 400 },\n            { year: 2023, cost: 300 }\n        ];\n\n        // Moore's Law data (halving every 18 months)\n        const mooresData = data.map(d => ({\n            year: d.year,\n            cost: 100000000 * Math.pow(0.5, (d.year - 2001) / 1.5)\n        }));\n\n        // Scales\n        const xScale = d3.scaleLinear()\n            .domain([2001, 2023])\n            .range([0, innerWidth]);\n\n        const yScale = d3.scaleLog()\n            .domain([100, 100000000])\n            .range([innerHeight, 0]);\n\n        // Axes\n        const xAxis = d3.axisBottom(xScale)\n            .ticks(10)\n            .tickFormat(d3.format(\"d\"));\n\n        const yAxis = d3.axisLeft(yScale)\n            .tickValues([100, 1000, 10000, 100000, 1000000, 10000000, 100000000])\n            .tickFormat(d => {\n                if (d >= 1000000) return `$${d/1000000}M`;\n                if (d >= 1000) return `$${d/1000}K`;\n                return `$${d}`;\n            });\n\n        // Add axes\n        g.append(\"g\")\n            .attr(\"class\", \"axis\")\n            .attr(\"transform\", `translate(0,${innerHeight})`)\n            .call(xAxis);\n\n        g.append(\"g\")\n            .attr(\"class\", \"axis\")\n            .call(yAxis);\n\n        // Line generators\n        const mooresLine = d3.line()\n            .x(d => xScale(d.year))\n            .y(d => yScale(d.cost));\n\n        const realCostLine = d3.line()\n            .x(d => xScale(d.year))\n            .y(d => yScale(d.cost));\n\n        // Add paths with initial dashoffset for animation\n        const mooresPath = g.append(\"path\")\n            .datum(mooresData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke-dasharray\", \"4,4\")\n            .attr(\"d\", mooresLine)\n            .attr(\"stroke-dashoffset\", function() { return this.getTotalLength(); })\n            .attr(\"stroke-dasharray\", function() { return this.getTotalLength(); });\n\n        const realCostPath = g.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#e41a1c\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"d\", realCostLine)\n            .attr(\"stroke-dashoffset\", function() { return this.getTotalLength(); })\n            .attr(\"stroke-dasharray\", function() { return this.getTotalLength(); });\n\n        // Add labels\n        g.append(\"text\")\n            .attr(\"class\", \"axis-label\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"x\", -innerHeight / 2)\n            .attr(\"y\", -60)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"0.4em\")\n            .text(\"Cost per Genome\");\n\n        // Add legend\n        g.append(\"line\")\n            .attr(\"x1\", innerWidth - 120)\n            .attr(\"x2\", innerWidth - 90)\n            .attr(\"y1\", 18)\n            .attr(\"y2\", 18)\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-width\", 2);\n\n        g.append(\"line\")\n            .attr(\"x1\", innerWidth - 120)\n            .attr(\"x2\", innerWidth - 90)\n            .attr(\"y1\", 38)\n            .attr(\"y2\", 38)\n            .attr(\"stroke\", \"#e41a1c\")\n            .attr(\"stroke-width\", 2);\n\n        g.append(\"text\")\n            .attr(\"x\", innerWidth - 80)\n            .attr(\"y\", 18)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"font-size\", \"0.4em\")\n            .text(\"Moore's Law\");\n\n        g.append(\"text\")\n            .attr(\"x\", innerWidth - 80)\n            .attr(\"y\", 38)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"font-size\", \"0.4em\")\n            .text(\"Real cost\");\n\n        // Animate Moore's Law line\n        mooresPath.transition()\n            .duration(4000)\n            .attr(\"stroke-dashoffset\", 0)\n            .on(\"end\", function() {\n                // After Moore's Law line is drawn, animate real cost line\n                realCostPath.transition()\n                    .duration(4000)\n                    .attr(\"stroke-dashoffset\", 0);\n            });\n    }\n\n    // Wait for Reveal to be ready\n    window.addEventListener('reveal-ready', () => {\n        Reveal.on('slidechanged', event => {\n            if (event.currentSlide.id === 'genome-cost-slide') {\n                createGenomeGraph();\n            }\n        });\n\n        // Initial creation if needed\n        if (Reveal.getCurrentSlide()?.id === 'genome-cost-slide') {\n            createGenomeGraph();\n        }\n    });\n}\n\n// Export and auto-initialize\nexport { initializeSequencingCosts };\ninitializeSequencingCosts();"],"names":["initializeSequencingCosts","createGenomeGraph","d3","select","selectAll","remove","margin","innerWidth","innerHeight","g","append","attr","data","year","cost","mooresData","map","d","Math","pow","xScale","scaleLinear","domain","range","yScale","scaleLog","xAxis","axisBottom","ticks","tickFormat","format","yAxis","axisLeft","tickValues","call","mooresLine","line","x","y","realCostLine","mooresPath","datum","this","getTotalLength","realCostPath","text","transition","duration","on","window","addEventListener","Reveal","event","currentSlide","id","getCurrentSlide"],"mappings":"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"}