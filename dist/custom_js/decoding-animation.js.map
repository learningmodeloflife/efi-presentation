{"version":3,"file":"decoding-animation.js","sources":["../../js/custom_js/decoding-animation.js"],"sourcesContent":["export function initializeDecodingAnimation() {\n  const container = document.getElementById('decoding-animation');\n  if (!container || window.innerWidth <= 768) return; \n  const content = container.textContent.trim();\n  container.textContent = null;\n\n  function calculateCharSize() {\n    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n    const totalWidth = vw * (2/5); \n    const charWidth = totalWidth / content.length;\n    const charWidthClamped = Math.min(Math.max(8, charWidth), 50); \n    const charHeight = charWidthClamped * 1.1; \n    return {\n        width: charWidthClamped,\n        height: charHeight\n    };\n  }\n\n  let { height: charHeight, width: charWidth } = calculateCharSize();\n\n  const nucleotides = ['A', 'C', 'T', 'G'];\n  const binaryDigits = ['0', '1'];\n\n  const chars = [];\n  const delayOffset = 1.5;\n  const delayWindow = 1.5;\n  const blendDuration = 0.5;\n\n  const resetRadius = 100;\n  const resetChance = 1.0;\n\n  function isMobile() {\n    return window.innerWidth <= 590;\n  }\n\n  function createLayout() {\n    container.innerHTML = '';\n    chars.length = 0;\n\n    if (isMobile()) {\n      createMobileLayout();\n    } else {\n      createDesktopLayout();\n    }\n  }\n\n  function createMobileLayout() {\n    const words = content.split(' ');\n    words.forEach(word => {\n      const wordContainer = document.createElement('div');\n      wordContainer.className = 'decoding-word';\n      word.split('').forEach((letter, index) => {\n        const char = createChar(letter, chars.length);\n        wordContainer.appendChild(char);\n        chars.push(char);\n      });\n      container.appendChild(wordContainer);\n    });\n  }\n\n  function createDesktopLayout() {\n    const textWidth = content.length * charWidth;\n    const wrapper = document.createElement('div');\n    wrapper.style.position = 'relative';\n    wrapper.style.display = 'inline-block';\n    wrapper.style.width = textWidth + 'px';\n    wrapper.style.height = charHeight + 'px';\n    \n    for (let i = 0; i < content.length; i++) {\n        const char = createChar(content[i], i);\n        char.style.position = 'absolute';\n        char.style.left = `${i * charWidth}px`;\n        char.style.top = '0';\n        wrapper.appendChild(char);\n        chars.push(char);\n    }\n    \n    container.appendChild(wrapper);\n  }\n\n  function createChar(letter, index) {\n    const char = document.createElement('span');\n    char.classList.add('decoding-char', 'decoded-text');\n    char.style.width = `${charWidth}px`;\n    char.style.height = `${charHeight}px`;\n    char.style.fontSize = `${charHeight * 0.9}px`;\n    char.dataset.final_char = letter;\n    char.dataset.index = index;\n    runDecoding(char, delayOffset);\n    return char;\n  }\n\n  async function runDecoding(char, delayInitial) {\n    if (!char.classList.contains('decoding')) {\n      char.classList.add('decoding');\n      char.classList.replace('decoded-text', 'encoded-text');\n      char.textContent = sampleLetter(nucleotides);\n\n      const blendOut = { opacity: [1, 0] };\n      const blendIn = { opacity: [0, 1] };\n\n      const durationNucleotide = delayInitial + Math.random() * delayWindow;\n      const durationBinary = delayOffset + Math.random() * delayWindow;\n\n      await char.animate(blendOut, { duration: durationNucleotide * 1000, iterations: 1, fill: 'forwards' }).finished;\n      char.textContent = sampleLetter(binaryDigits);\n      await char.animate(blendIn, { duration: durationBinary * 1000, iterations: 1, fill: 'forwards' }).finished;\n\n      await char.animate(blendOut, { duration: blendDuration * 1000, delay: durationBinary * 1000, iterations: 1, fill: 'forwards' }).finished;\n      char.textContent = char.dataset.final_char;\n      char.classList.replace('encoded-text', 'decoded-text');\n      await char.animate(blendIn, { duration: blendDuration * 1000, iterations: 1, fill: 'forwards' }).finished;\n      char.classList.remove('decoding');\n    }\n  }\n\n  function sampleLetter(letters) {\n    return letters[Math.floor(Math.random() * letters.length)];\n  }\n\n  function resetNearbyChars(event) {\n    const rect = container.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    chars.forEach(char => {\n      const charRect = char.getBoundingClientRect();\n      const charCenterX = charRect.left + charRect.width / 2 - rect.left;\n      const charCenterY = charRect.top + charRect.height / 2 - rect.top;\n\n      const distance = Math.sqrt(\n        Math.pow(mouseX - charCenterX, 2) + Math.pow(mouseY - charCenterY, 2)\n      );\n\n      if (distance <= resetRadius) {\n        if (resetChance * (1 - distance / resetRadius) > Math.random()) {\n          runDecoding(char, 0);\n        }\n      }\n    });\n  }\n\n  createLayout();\n  container.addEventListener('mousemove', resetNearbyChars);\n\n  let resizeTimeout;\n  window.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n      ({ height: charHeight, width: charWidth } = calculateCharSize());\n      createLayout();\n    }, 250);\n  });\n}\n\nwindow.addEventListener('reveal-ready', () => {\n  initializeDecodingAnimation();\n});\n"],"names":["initializeDecodingAnimation","container","document","getElementById","window","innerWidth","content","textContent","trim","calculateCharSize","charWidth","Math","max","documentElement","clientWidth","length","charWidthClamped","min","width","height","charHeight","nucleotides","binaryDigits","chars","delayOffset","delayWindow","blendDuration","createLayout","innerHTML","split","forEach","word","wordContainer","createElement","className","letter","index","char","createChar","appendChild","push","textWidth","wrapper","style","position","display","i","left","top","createDesktopLayout","classList","add","fontSize","dataset","final_char","runDecoding","async","delayInitial","contains","replace","sampleLetter","blendOut","opacity","blendIn","durationNucleotide","random","durationBinary","animate","duration","iterations","fill","finished","delay","remove","letters","floor","resizeTimeout","addEventListener","event","rect","getBoundingClientRect","mouseX","clientX","mouseY","clientY","charRect","charCenterX","charCenterY","distance","sqrt","pow","clearTimeout","setTimeout"],"mappings":"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"}